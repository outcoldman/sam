/*jshint globalstrict: true*/ 'use strict';

var SplunkInstance = require('./../lib/instance');

module.exports = function(grunt) {
  grunt.config.requires('splunk.splunkHome');

  // Let's keep it global to make sure that user will not need to reenter password every time
  var instance = null;

  grunt.registerTask('splunk-services', 'Manipulate Splunk services', function() {
    var done = this.async();

    if (!instance) {
      grunt.config.requires('splunk.splunkHome');
      instance = new SplunkInstance({
        config: grunt.config('splunk'),
        log: {
          debug: grunt.log.debug,
          warn: grunt.fail.warn,
          error: grunt.log.error,
          fatal: grunt.fail.fatal,
          ok: grunt.log.ok,
          log: grunt.log.writeln
        }
      });
    }

    if (arguments.length === 1 && arguments[0] === 'reload-apps') { // splunk-services:reload-apps
      grunt.config.requires('splunk.splunkd');
      instance.reloadSplunkApps(done);
    } else {
      if (arguments.length !== 2) {
        grunt.fatal('Unexpected number of arguments. After apps you can specify only application name.');
      }

      switch (arguments[0]) {
        case '*': {
          switch (arguments[1]) {
            case 'start': { // splunk-services:*:start
              instance.start(done);
              break;
            }
            case 'stop': { // splunk-services:*:stop
              instance.stop(done);
              break;
            }
            case 'restart': { // splunk-services:*:restart
              instance.restart(done);
              break;
            }
            default: {
              grunt.fatal('Unexpected argument: ' + arguments[1]);
              done();
              break;
            }
          }
          break;
        }
        case 'splunkd': {
          switch (arguments[1]) {
            case 'start': { // splunk-services:splunkd:start
              instance.startSplunkd(done);
              break;
            }
            case 'stop': { // splunk-services:splunkd:stop
              instance.stopSplunkd(done);
              break;
            }
            case 'restart': { // splunk-services:splunkd:restart
              instance.restartSplunkd(done);
              break;
            }
            default: {
              grunt.fatal('Unexpected argument: ' + arguments[1]);
              done();
              break;
            }
          }
          break;
        }
        case 'splunkweb': {
          switch (arguments[1]) {
            case 'start': { // splunk-services:splunkweb:start
              instance.startSplunkWeb(done);
              break;
            }
            case 'stop': { // splunk-services:splunkweb:stop
              instance.stopSplunkWeb(done);
              break;
            }
            case 'restart': { // splunk-services:splunkweb:restart
              instance.restartSplunkWeb(done);
              break;
            }
            default: {
              grunt.fatal('Unexpected argument: ' + arguments[1]);
              done();
              break;
            }
          }
          break;
        }
        default: {
          grunt.fatal('Unexpected argument: ' + arguments[0]);
          done();
          break;
        }
      }
    }
  });
};